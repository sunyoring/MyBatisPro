# ⚫ Mybatis 동적 SQL

## ✔️동적 SQL이란 ?

 - 일반적으로 검색 기능이나 다중 입력 처리 등을 수행해야 할 경우 SQL을 실행하는 DAO를 여러 번 호출하거나 batch 기능을 이용하여 버퍼에 담아서 한 번에 실행시키는 방식으로 쿼리를 구현했다면, Mybatis에서는 이를 동적으로 제어할 수 있는 구문을 제공하여 좀 더 쉽게 쿼리를 구현할 수 있도록 하는 기능을 제어한다. 

## ✔️ 종류

### * if 구문

 - 동적 쿼리를 구현할 때 가장 기본적으로 사용되는 구문

 - 특정 조건을 만족할 경우 안의 구문을 쿼리에 포함시킴

```xml
<select id="getListCountCon" parameterType="SearchCondition" resultType = "_int">
 	  SELECT 
	  COUNT(*)
	  FROM BOARD B
	  JOIN MEMBER ON(BOARD_WRITER=USER_NO)
	  WHERE B.STATUS ='Y'
	  <if test="writer != null">
	  	AND USER_ID LIKE '%' || #{writer} || '%'
	  </if>
	  <if test="title != null">
	  	AND BOARD_TITLE LIKE '%' || #{title} || '%'
	  </if>
	  <if test="content != null">
	  	AND BOARD_CONTENT LIKE '%' || #{content} || '%'
	  </if>
  </select>
```

### * choose, when, otherwise 구문

 - 자바의 if-else , swith , JSTL의 choose 구문과 유사하며 주어진 구문 중 한가지만을 수행하고자 할 때 사용한다.

```xml
SELECT BOARD_NO, BOARD_TITLE, USER_ID, COUNT, CREATE_DATE
	  FROM BOARD B
	  JOIN MEMBER ON(BOARD_WRITER=USER_NO)
	  WHERE 1=1  
 	  <choose>
	  		<when test="writer != null">
	  			  	AND USER_ID LIKE '%' || #{writer} || '%'
	  		
	  		</when>
	  		<when test="title != null">
	  			  	AND BOARD_TITLE LIKE '%' || #{title} || '%'
	  		
	  		</when>
	  		<otherwise>
	  			  	AND BOARD_CONTENT LIKE '%' || #{content} || '%'
	  		</otherwise>
	  </choose>
```

### * trim, where, set 구문

 - < trim > : 쿼리 구문의 특정 부분을 없앨 때 쓰인다.

 - < where > : 기존 쿼리의 WHERE 절을 동적으로 구현할 때 쓰인다.

 - < set > : 기존의 UPDATE SET 절을 동적으로 구현할 때 쓰인다.

### * WHERE 구문

 - 단순히 WHERE 절을 추가하지만, 만약 태그 안의 내용이 'AND' 나 'OR'로 시작할 경우 'AND'나 'OR'을 제거한다. 

```xml
<select id="searchBoard" resultType ="arraylist">
	SELECT *
	FROM BOARD
	<where>
		<if test="writer != null">
				writer = #{writer}
		</if test="title != null">
				AND TITLE = #{tite}
		<if>
		</if>
	</where>
</select>
	
```

### * trim 구문을 통해 where 구현 *

 - 태그 안의 내용이 완성될 때 처음 시작 단어(prefix) 와 시작 시 제거해야 할 단어 (prefixOverrides)를 명시하여 where와 같은 내용으로 구현할 수 있다.

```xml
<select id="selectListCon" parameterType="SearchCondition" resultMap = "boardResultMap">
	  
	  SELECT BOARD_NO, BOARD_TITLE, USER_ID, COUNT, CREATE_DATE
	  FROM BOARD B
	  JOIN MEMBER ON(BOARD_WRITER=USER_NO)
		<trim prefix="WHERE" prefixOverrides="AND">
		 		<if test="writer != null">
			  			  	AND USER_ID LIKE '%' || #{writer} || '%'
		 		</if>
		 		<if test="title != null">
			  			  	AND BOARD_TITLE LIKE '%' || #{title} || '%'
		 		</if>
		 		<if test="content != null">
			  			  	AND BOARD_CONTENT LIKE '%' || #{content} || '%'
		 		</if>
		 	</trim>
			AND B.STATUS ='Y'
   		ORDER BY BOARD_NO DESC
  </select>
```

### set 구문

 - UPDATE 하고자 하는 컬럼을 동적으로 포함시키기 위해 사용

 - SET 키워드를 붙이고 불필요한 콤마를 제거해준다.

```xml
<update id = "updateMember">
	UPDATE MEMBER
	<set>
			<if test = "userName != null">
				USER_NAME = #{userName},
			</if>
			<if test ="userPwd != null">
				USER_PWD = #{userPwd},
			</if>
	</set>
</updaet> 
```

### * trim을 통해 set 구현

 - WHERE 와 흡사하나 suffixOverrides 속성을 ' , ' 로 설정하여 구문의 마지막에 제거할 값을 명시한다.

```xml
<update id = "updateMember">
	UPDATE MEMBER
	<trim prefix="SET" suffixOverrides=" , ">
			<if test = "userName != null">
				USER_NAME = #{userName},
			</if>
			<if test ="userPwd != null">
				USER_PWD = #{userPwd},
			</if>
	</trim >
</updaet> 
```

### foreach 구문

 - 동적 쿼리를 표현할 때 collection에 대한 반복 처리를 제공한다.

```xml
<select id = "searchBoadwords" resultType = "arraylist">
	SELECT * 
	FROM BOARD
	WHERE TITLE IN
	<foreach item="item" index="i" collection="list" open="(" sparator="," close=")">
			#{item}
	</foreach>
</select>
```

**foreach의 결과로 생성되는 SQL**

SELECT * FROM BOARD WHERE TITLE IN ( '   **AA**  '  , '    **BB**   ','    **CC**     ' )

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/10154417-f283-4024-9c52-d37368033348/Untitled.png)

## ✔️ Mybatis에서 #{} 와 ${}의 차이

#{ } : 파라미터가 String 형태로 들어와 자동적으로 파라미터 형태가 된다.  예를 들어 VALUE= #{value} 에서 value 의 값이 string 이라면 VALUE = "string" 으로 변환되는 것이다. 이는 쿼리주입을 예방할 수 있어 보안측면에서 유리하다.

${ } : 파라미터가 문자열 형태로 변환되지 않고 바로 출력된다. 값이 넣어진 채로 쿼리문이 수행되는 것이다. 그렇기 때문에 파라미터의 값이 바뀔 때마다 쿼리문 파싱을 진행해야하므로 성능상 단점이 존재한다고 볼 수 있다. 

상황에 따라 달라질 수 있겠으나 보안을 고려한다면 #{ } 를 사용해야 한다.

[Mybatis 에서 CDATA 사용하기](https://epthffh.tistory.com/entry/Mybatis-%EC%97%90%EC%84%9C-CDATA-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0)
